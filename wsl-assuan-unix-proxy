#!/usr/bin/env python3
# Copyright 2018-2021  Simon Arlott
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

import argparse
import inotify.adapters
import inotify.constants
import logging
import os
import select
import signal
import socket
import sys
import time


DEFAULT_LISTEN = os.path.join(os.environ["HOME"], ".gnupg", "S.gpg-agent")
DEFAULT_CONNECT = os.path.join("/mnt/c/Users", os.environ["USER"], "AppData", "Roaming", "gnupg", "S.gpg-agent")


def create_socket(listen):
	s = socket.socket(family=socket.AF_UNIX, type=socket.SOCK_STREAM)
	try:
		s.bind(listen)
	except OSError as e:
		logging.error("Socket already exists")
		s.close()
		return None
	s.listen()
	logging.info("Listening on " + listen)
	os.set_inheritable(s.fileno(), False)
	return s


def cleanup_socket(listen):
	try:
		os.unlink(listen)
	except FileNotFoundError:
		pass


def run(listen, connect):
	os.umask(0o0077)

	logging.info("Opening listening socket on " + listen)
	cleanup_socket(listen)

	nfy = inotify.adapters.Inotify(block_duration_s=0)
	nfy.add_watch(os.path.dirname(listen), inotify.constants.IN_DELETE)
	events = nfy.event_gen(yield_nones=True)

	linux = create_socket(listen)

	id = 0
	running = True
	while running:
		if linux is None:
			nfy.remove_watch(os.path.dirname(listen))
			while True:
				event = next(events)
				if event is None:
					break
				
			cleanup_socket(listen)
			nfy.add_watch(os.path.dirname(listen), inotify.constants.IN_DELETE)

			linux = create_socket(listen)
			continue

		rfds, wfds, xfds = select.select([linux, nfy._Inotify__inotify_fd], [], [])

		if nfy._Inotify__inotify_fd in rfds:
			while True:
				event = next(events)
				if event is None:
					break

				if listen == os.path.join(*event[2:4]):
					logging.info("Socket has been deleted")
					if linux is not None:
						linux.close()
					linux = None
			continue

		if linux not in rfds:
			continue

		(client, address) = linux.accept()
		id += 1
		try:
			if os.fork() == 0:
				logging.info("Accepted connection " + str(id))
				running = False

				attempts = 20
				while attempts > 0:
					attempts -= 1

					try:
						with open(connect, "rb") as f:
							lines = f.read().split(b"\n", 2)
							if len(lines) < 2:
								logging.error("File " + connect + " invalid: " + repr(lines))
							port = int(lines[0].decode("ascii"))
							token = lines[1]
					except FileNotFoundError as e:
						logging.error(e)
						return

					logging.info("Connecting to port " + str(port))
					with socket.socket(family=socket.AF_INET, type=socket.SOCK_STREAM, proto=socket.IPPROTO_TCP) as windows:
						try:
							windows.connect(("127.0.0.1", port))
						except socket.error as e:
							logging.error(e)
							time.sleep(0.5)
							continue

						logging.debug("Sending token")
						windows.send(token)

						logging.debug("Bridging sockets")
						try:
							os.set_inheritable(client.fileno(), True)
							os.set_inheritable(windows.fileno(), True)
							os.execlp("socat", "socat", "fd:" + str(client.fileno()), "fd:" + str(windows.fileno()))
						except OSError as e:
							logging.error(e)
							time.sleep(0.5)
							continue

				logging.error("Failed to connect")
		finally:
			client.close()


if __name__ == "__main__":
	logging.basicConfig(level=logging.INFO, format="%(asctime)-15s [%(process)10d] %(levelname)-7s %(message)s")

	parser = argparse.ArgumentParser(description="Windows Subsystem for Linux Assuan Unix Proxy")
	parser.add_argument("-l", "--listen", metavar="LISTEN_FILENAME", type=str, default=DEFAULT_LISTEN, help="Linux socket path [" + DEFAULT_LISTEN + "]")
	parser.add_argument("-c", "--connect", metavar="CONNECT_FILENAME", type=str, default=DEFAULT_CONNECT, help="Windows socket path [" + DEFAULT_CONNECT + "]")

	args = parser.parse_args()

	def sigterm_handler(signum, frame):
		cleanup_socket(args.listen)
		signal.signal(signal.SIGTERM, signal.SIG_DFL)
		os.kill(os.getpid(), signal.SIGTERM)
		sys.exit(1)

	signal.signal(signal.SIGTERM, sigterm_handler)

	try:
		run(args.listen, args.connect)
	finally:
		cleanup_socket(args.listen)
